{"version":3,"file":"wayfu-dom.min.js","mappings":"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","sources":["webpack://DOM/webpack/universalModuleDefinition","webpack://DOM/webpack/bootstrap","webpack://DOM/webpack/runtime/define property getters","webpack://DOM/webpack/runtime/hasOwnProperty shorthand","webpack://DOM/./src/baseClass.js","webpack://DOM/./src/utils.js","webpack://DOM/./src/helpers.js","webpack://DOM/./index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DOM\"] = factory();\n\telse\n\t\troot[\"DOM\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * Extended Built-in Array\r\n * @class Base\r\n * @classdesc An custom array extends built in array\r\n * @augments {Array}\r\n */\r\nexport default class Base extends Array {\r\n    /**\r\n     * Get empty status current array\r\n     */\r\n    get isEmpty() {\r\n        return this.length <= 0;\r\n    }\r\n\r\n    /**\r\n     * Get all non epmty array items\r\n     */\r\n    get nonEmptyValue() {\r\n        return this.filter((val) => !!val);\r\n    }\r\n\r\n    /**\r\n     * Get first array item\r\n     */\r\n    get first() {\r\n        return !this.isEmpty ? this.at(0) : undefined;\r\n    }\r\n\r\n    /**\r\n     * Get last array item\r\n     */\r\n    get last() {\r\n        return !this.isEmpty ? this.at(this.length - 1) : undefined;\r\n    }\r\n\r\n    /**\r\n     * Change index order of an items, and return this array.\r\n     * `Carefull: This function will override old array.`\r\n     * @param {number} oldIndex\r\n     * @param {number} newIndex\r\n     * @returns\r\n     */\r\n    changeIndex(oldIndex, newIndex) {\r\n        if (newIndex >= this.length) {\r\n            let i = newIndex - this.length + 1;\r\n            while (i--) {\r\n                this.push(undefined);\r\n            }\r\n        }\r\n        this.splice(newIndex, 0, this.splice(oldIndex, 1)[0]);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Count number of a value in current array;\r\n     * @param {any} val\r\n     * @returns {number}\r\n     */\r\n    countValue(val) {\r\n        let count = 0;\r\n        this.forEach((e) => {\r\n            count += e === val ? 1 : 0;\r\n        });\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Check given value is on this array or not\r\n     * @param {any} item\r\n     * @returns {boolean}\r\n     */\r\n    isOnArray(item) {\r\n        return this.some((elm) => item === elm);\r\n    }\r\n\r\n    /**\r\n     * Create an array by spliting a string with a delimiter\r\n     * @param {String} string\r\n     * @param {String} delimiter\r\n     * @returns {MyArray}\r\n     */\r\n    static split(string, delimiter) {\r\n        let arr = string.split(delimiter);\r\n        return new MyArray(...arr);\r\n    }\r\n\r\n    /**\r\n     * Reconstruct `Array.from` to create new MyArray\r\n     * From `IterableObject`.\r\n     * @param {Iterable<any> | ArrayLike<any>} arrayLike\r\n     * @returns {MyArray}\r\n     */\r\n    static create(arrayLike) {\r\n        return new MyArray(...Array.from(arrayLike));\r\n    }\r\n}\r\n","/**\r\n * @typedef {import(\"../types\").kindOfNode} kindOfNode\r\n */\r\n\r\nconst rgx = {\r\n    snaKebab: /([-_][a-z])/g,\r\n    camelCase: /[A-Z]/g,\r\n};\r\n\r\n/**\r\n * Convert `snake_case` or `kebab-case` to `camelCase` string\r\n * @param {String} string\r\n * @returns\r\n */\r\nconst toCamel = (string) => {\r\n    let { snaKebab } = rgx;\r\n    if (!snaKebab.test(string)) return string;\r\n\r\n    string = string.toLowerCase();\r\n    return string.replace(snaKebab, (m) => {\r\n        return m.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\");\r\n    });\r\n};\r\n\r\n/**\r\n * Convert `camelCase` to `kebab-case` string\r\n * @param {String} string\r\n * @returns\r\n */\r\nconst toKebab = (string) => {\r\n    let { camelCase } = rgx;\r\n    if (!camelCase.test(string)) return string;\r\n\r\n    return string.replace(camelCase, (m) => {\r\n        return `-${m.toLocaleLowerCase()}`;\r\n    });\r\n};\r\n\r\n/**\r\n * Check the given query is belongs to Node type or not\r\n * @param {kindOfNode | Object} query\r\n * @returns\r\n */\r\nconst isNode = (query) => {\r\n    return (\r\n        query instanceof Document ||\r\n        query instanceof Window ||\r\n        query instanceof HTMLElement\r\n    );\r\n};\r\n\r\nexport { toCamel, toKebab, isNode };\r\n","import DOM from \"../index.js\";\r\nimport { toKebab } from \"./utils.js\";\r\n\r\n/**\r\n * @typedef {import(\"../types.js\").elemenOptions} elemenOptions\r\n * @typedef {import(\"../types.js\").kindOfNode} kindOfNode\r\n * @typedef {import(\"../types.js\").listElementOptions} listElementOptions\r\n * @typedef {import(\"../types.js\").svgElemenOptions} svgElemenOptions\r\n */\r\n\r\n/**\r\n * Actual method for creating Element(s)\r\n * and Collect it into DOM Object\r\n * @param {elemenOptions | svgElemenOptions} props\r\n * @param {DOM?} dom_\r\n * @returns\r\n */\r\nfunction createElement(props, dom_) {\r\n    let _dom = dom_ ? dom_ : new DOM();\r\n\r\n    const element = (({ tag, namespace }) => {\r\n        if (namespace) return document.createElementNS(namespace, tag);\r\n        return document.createElement(tag);\r\n    })(props);\r\n\r\n    delete props.tag;\r\n\r\n    _dom.unshift(element);\r\n\r\n    return setProperties(props, _dom);\r\n    // return _dom.setProperties(props);\r\n}\r\n\r\n/**\r\n * Method for geting Element(s)\r\n * and Collect it into DOM Object\r\n * @param {String} query\r\n * @param {DOM} dom_\r\n * @returns\r\n */\r\nfunction getElement(query, dom_) {\r\n    let _dom = dom_ ? dom_ : new DOM();\r\n\r\n    if (!_dom.first) {\r\n        if (/^(?:document|window)$/g.test(query)) {\r\n            return _dom.get(/^document$/g.test(query) ? document : window);\r\n        }\r\n    }\r\n\r\n    if (_dom.first) return DOM.get(_dom.first.querySelectorAll(query));\r\n\r\n    let res = document.querySelectorAll(query);\r\n    if (!res.length) return _dom;\r\n\r\n    res.forEach((node) => _dom.push(node));\r\n    return _dom;\r\n}\r\n\r\n/**\r\n * Set properties for current HTML Element\r\n * @param {elemenOptions} props\r\n * @param {DOM} dom\r\n * @returns\r\n */\r\nfunction setProperties(props, dom) {\r\n    let { namespace } = props;\r\n\r\n    delete props.namespace;\r\n    /** @type {(node: HTMLElement) => void} */\r\n    const setProp = (node) => {\r\n        for (const name in props) {\r\n            if (props.hasOwnProperty(name)) {\r\n                if (!namespace) {\r\n                    switch (name) {\r\n                        case \"text\":\r\n                            let text =\r\n                                \"innerText\" in document ? \"innerText\" : \"textContent\";\r\n                            node[text] = props[name];\r\n                            break;\r\n                        case \"html\":\r\n                            node.innerHTML = props[name];\r\n                            break;\r\n                        case \"class\":\r\n                        case \"classid\":\r\n                            if (typeof props[name] === \"array\") {\r\n                                for (let cls of props[name]) {\r\n                                    node.classList.add(cls);\r\n                                }\r\n                            } else if (typeof props[name] === \"string\") {\r\n                                node.className = props[name];\r\n                            }\r\n                            break;\r\n                        case \"addClass\":\r\n                            node.classList.add(props[name]);\r\n                            break;\r\n                        case \"removeClass\":\r\n                            node.classList.remove(props[name]);\r\n                            break;\r\n                        case \"toggleClass\":\r\n                            node.classList.toggle(props[name]);\r\n                            break;\r\n                        case \"disabled\":\r\n                            node.disabled = props[name];\r\n                            break;\r\n                        case \"append\":\r\n                            DOM.get(node).insertTo(props[name]);\r\n                            break;\r\n                        case \"prepend\":\r\n                            DOM.get(node).insertBefore(props[name], true);\r\n                            break;\r\n                        case \"before\":\r\n                            DOM.get(node).insertBefore(props[name]);\r\n                            break;\r\n                        case \"after\":\r\n                            DOM.get(node).insertAfter(props[name]);\r\n                            break;\r\n                        case \"value\":\r\n                            node.value = props[name];\r\n                            break;\r\n                        case \"dispatch\":\r\n                            node.dispatchEvent(props[name]);\r\n                            break;\r\n                        case \"replace\":\r\n                            DOM.get(node).replace(props[name]);\r\n                            break;\r\n                        case \"event\":\r\n                            for (const evName in props.event) {\r\n                                if (props.event.hasOwnProperty(evName)) {\r\n                                    DOM.get(node).onEvent(evName, props.event[evName]);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"callback\":\r\n                            props[name](node);\r\n                            break;\r\n                        case \"readonly\":\r\n                        case \"readOnly\":\r\n                            node.readOnly = props[name];\r\n                            break;\r\n                        default:\r\n                            node.setAttribute(name, props[name]);\r\n                    }\r\n                } else {\r\n                    node.setAttributeNS(null, toKebab(name), props[name]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    if (dom.isEmpty) return dom;\r\n\r\n    dom.forEach((e) => setProp(e));\r\n\r\n    return dom;\r\n}\r\n\r\n/**\r\n * Set Element(s) styles. Can process multiple element\r\n * @param {elementStyles} styles\r\n * @param {DOM} dom\r\n * @returns\r\n */\r\nfunction setStyles(styles, dom) {\r\n    /** @type {(node: HTMLElement | undefined, props: CSSStyleDeclaration) => void} */\r\n    const setStyle = (node, props) => {\r\n        if (!node) return dom;\r\n        for (const key in props) {\r\n            if (props.hasOwnProperty(key)) {\r\n                switch (key) {\r\n                    case \"zIndex\":\r\n                        node.style.zIndex = props[key];\r\n                        break;\r\n                    case \"margin\":\r\n                        node.style.margin = props[key];\r\n                        break;\r\n                    case \"padding\":\r\n                        node.style.padding = props[key];\r\n                        break;\r\n                    case \"display\":\r\n                        node.style.display = props[key];\r\n                        break;\r\n                    default:\r\n                        node.style[key] = props[key];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /** @type {(query: String | kindOfNode) => HTMLElement | undefined} */\r\n    const getEle = (query) => DOM.get(query).first;\r\n\r\n    if (Array.isArray(styles)) {\r\n        styles.forEach(({ elm, props }) => {\r\n            setStyle(getEle(elm), props);\r\n        });\r\n\r\n        return dom;\r\n    }\r\n\r\n    if (dom.isEmpty) return dom;\r\n\r\n    dom.forEach((e) => setStyle(e, styles));\r\n\r\n    return dom;\r\n}\r\n\r\nexport { createElement, getElement, setProperties, setStyles };\r\n","import Base from \"./src/baseClass.js\";\r\nimport { toCamel, toKebab, isNode } from \"./src/utils.js\";\r\nimport { createElement, getElement, setProperties, setStyles } from \"./src/helpers.js\";\r\n\r\n/**\r\n * @typedef {import(\"../types.js\").elemenOptions} elemenOptions\r\n * @typedef {import(\"../types.js\").kindOfNode} kindOfNode\r\n * @typedef {import(\"../types.js\").listElementOptions} listElementOptions\r\n * @typedef {import(\"../types.js\").svgElementDetails} svgElementDetails\r\n * @typedef {import(\"../types.js\").svgElemenOptions} svgElemenOptions\r\n */\r\n/**\r\n * Just a DOM Class using extended custom Array\r\n * @extends {Base<HTMLElement>}\r\n */\r\nexport default class DOM extends Base {\r\n    /**\r\n     * Create new Empty DOM Object\r\n     * @overload\r\n     * @type {() => DOM}\r\n     */ /**\r\n     * Create new DOM with matched Element(s) from query\r\n     * @overload\r\n     * @param {String | kindOfNode | NodeList} query\r\n     */ /**\r\n     * Return the current DOM\r\n     * @overload\r\n     * @param {DOM} query\r\n     */ /**\r\n     * Create new DOM with created Element(s) from given properties\r\n     * @overload\r\n     * @param {(elemenOptions | elemenOptions[])} query\r\n     * @param {true} create\r\n     */\r\n    constructor(query, create) {\r\n        super();\r\n        return create ? this.create(query) : this.get(query);\r\n    }\r\n\r\n    /** Get current element childNodes */\r\n    get childNodes() {\r\n        return !this.isEmpty ? this.first.childNodes : undefined;\r\n    }\r\n\r\n    /** Get current element parent */\r\n    get parent() {\r\n        return !this.isEmpty ? this.first.parentNode : undefined;\r\n    }\r\n\r\n    /** Get current next sibling element */\r\n    get nextSibling() {\r\n        return !this.isEmpty ? this.first.nextSibling : undefined;\r\n    }\r\n\r\n    /** Get current element classList*/\r\n    get classList() {\r\n        return !this.isEmpty ? this.first.classList : undefined;\r\n    }\r\n\r\n    /**\r\n     * Create new HTMLElement(s) and\r\n     * Collect it into DOM Object\r\n     * @param {elemenOptions | elemenOptions[] | null} props\r\n     * @returns\r\n     */\r\n    create(props) {\r\n        if (!props) return this;\r\n\r\n        if (this.first) return DOM.create(props, { append: this.first });\r\n\r\n        if (Array.isArray(props)) {\r\n            for (let opt of props) {\r\n                if (typeof opt !== \"object\" && !opt.tag) continue;\r\n\r\n                createElement(props, this);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        return createElement(props, this);\r\n    }\r\n\r\n    /**\r\n     * Get some HTMLElement(s) and\r\n     * Collect it into DOM Object\r\n     * @param {String | kindOfNode | NodeList | DOM | null} query\r\n     * @returns\r\n     */\r\n    get(query) {\r\n        if (!query) return this;\r\n        if (typeof query === \"string\") return getElement(query, this);\r\n        if (query instanceof DOM) return query;\r\n\r\n        if (isNode(query)) {\r\n            this.push(query);\r\n        } else if (query instanceof NodeList) {\r\n            if (query.length === 0) return this;\r\n            query.forEach((node) => this.push(node));\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Is current element matches with given query?\r\n     * @param {String | kindOfNode | NodeList | DOM} query\r\n     * @returns\r\n     */\r\n    matches(query) {\r\n        let elms = DOM.get(query),\r\n            { length: i } = elms;\r\n\r\n        if (elms.isEmpty) return false;\r\n        while (--i >= 0 && elms.at(i) !== this.first) {}\r\n        return i > -1;\r\n    }\r\n\r\n    /**\r\n     * Get some HTMLElement(s) that are parent for current element\r\n     * and Collect it into DOM Object\r\n     * @param {String | kindOfNode | NodeList | DOM | null} query\r\n     * @returns\r\n     */\r\n    getParents(query) {\r\n        /** @type {(elm: DOM) => DOM} */\r\n        const setParent = (elm) => DOM.get(elm.parent);\r\n        /** @type {(elm: DOM) => boolean} */\r\n        const isPeek = (elm) => {\r\n            let { isEmpty, first } = elm;\r\n            return !isEmpty && first !== document;\r\n        };\r\n\r\n        let elem = this,\r\n            parents = setParent(elem);\r\n\r\n        for (; isPeek(elem); elem = setParent(elem)) {\r\n            if (query) {\r\n                if (elem.matches(query)) parents = elem;\r\n                continue;\r\n            }\r\n            parents.unshift(elem.first);\r\n        }\r\n        return parents;\r\n    }\r\n\r\n    /**\r\n     * Set single properties. Can be attributes or stylesheet\r\n     * @param {String | {[k: String]: String | Number | Boolean}} key\r\n     * @param {String | Number | Boolean | null} value\r\n     * @returns\r\n     */\r\n    set(key, value) {\r\n        if (typeof key === \"object\") {\r\n            for (let name in key) {\r\n                this.set(name, key[name]);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        const [isStyleKey, props] = ((k, v) => {\r\n            let keys = Object.getOwnPropertyNames(this.first.style);\r\n            return [keys.some((e) => e === k), { [k]: v }];\r\n        })(toCamel(key), value);\r\n\r\n        return isStyleKey ? setStyles(props, this) : setProperties(props, this);\r\n    }\r\n\r\n    /**\r\n     * Remove current element or an element from current element\r\n     * @param {String | kindOfNode | DOM | null} query\r\n     * @returns\r\n     */\r\n    remove(query) {\r\n        const getEle = (query) => DOM.get(query).first;\r\n\r\n        if (query) {\r\n            this.first.removeChild(getEle(query));\r\n        } else {\r\n            getEle(\"body\").removeChild(this.first);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert an element into current element\r\n     * if it's non exist element, then create one\r\n     * @param {String | kindOfNode | DOM | elemenOptions} element\r\n     * @returns\r\n     */\r\n    insert(element) {\r\n        const { first: elm } = ((e, fn) => {\r\n            if (e instanceof DOM) return e;\r\n            if (typeof e === \"object\") return fn.create(e);\r\n            return fn.get(e).isEmpty ? fn.create(e) : fn.get(e);\r\n        })(element, DOM);\r\n\r\n        this.first.appendChild(elm);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert current element into target element\r\n     * @param {String | kindOfNode | DOM} target\r\n     * @returns\r\n     */\r\n    insertTo(target) {\r\n        const getEle = (query) => DOM.get(query).first;\r\n        getEle(target).appendChild(this.first);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert current element into first child of target element\r\n     * @param {String | kindOfNode | DOM} target\r\n     * @param {Boolean?} prepend\r\n     * @returns\r\n     */\r\n    insertBefore(target, prepend = false) {\r\n        const { first, parent, childNodes } = DOM.get(target);\r\n\r\n        if (!prepend) {\r\n            parent.insertBefore(this.first, first);\r\n        } else {\r\n            if (childNodes.length) {\r\n                first.insertBefore(this.first, childNodes[0]);\r\n            } else {\r\n                this.insertTo(target);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert current element after target element\r\n     * @param {String | kindOfNode | DOM} target\r\n     * @returns\r\n     */\r\n    insertAfter(target) {\r\n        const { parent, nextSibling } = DOM.get(target);\r\n        parent.insertBefore(this.first, nextSibling);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Replace target element with current element\r\n     * @param {String | kindOfNode | DOM} target\r\n     * @returns\r\n     */\r\n    replace(target) {\r\n        const { parent, first } = DOM.get(target);\r\n        parent.replaceChild(this.first, first);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add event listener to an element\r\n     * @param {string} type type of event\r\n     * @param {EventListener} listener event listener\r\n     * @param {boolean} bubbles bubbling\r\n     * @returns\r\n     */\r\n    onEvent(type, listener, bubbles = false) {\r\n        if (window.addEventListener) {\r\n            (this.first || window).addEventListener(type, listener, bubbles);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Static method for creating new DOM instance with new Element(s)\r\n     * @param {String | DOM | elemenOptions | elemenOptions[]} tag\r\n     * @param {elemenOptions} opt\r\n     * @returns\r\n     */\r\n    static create(tag, opt = {}) {\r\n        if (tag instanceof DOM) return tag;\r\n\r\n        /** @type {(tag: String | elemenOptions, opt: elemenOptions) => elemenOptions} */\r\n        const props = (tag, opt) => {\r\n            return Object.assign(typeof tag == \"string\" ? { tag } : tag, opt);\r\n        };\r\n\r\n        if (Array.isArray(tag)) {\r\n            tag.map((e) => {\r\n                let { tag: t, ...prop } = e;\r\n                return !!prop ? props(t, props(prop, opt)) : props(e, opt);\r\n            });\r\n            return new DOM(tag, true);\r\n        }\r\n\r\n        return new DOM(props(tag, opt), true);\r\n    }\r\n\r\n    /**\r\n     * Static method for creating new DOM instance with new Element(s)\r\n     * @param {Base<listElementOptions|String>} items\r\n     * @param {\"ol\"|\"ul\"} type list type\r\n     * @param {elemenOptions} opt\r\n     * @returns\r\n     */\r\n    static createList(items, type = \"ol\", opt = {}) {\r\n        let Lists = DOM.create(type, opt);\r\n        if (Array.isArray(items)) {\r\n            items.forEach((e) => {\r\n                if (typeof e === \"object\") {\r\n                    let { title, content } = e,\r\n                        item = DOM.create(\"li\", { html: title });\r\n\r\n                    if (Array.isArray(content)) {\r\n                        DOM.createList(content, type || \"ol\").insertTo(item);\r\n                    }\r\n                    Lists.insert(item);\r\n                } else if (typeof e === \"string\") {\r\n                    Lists.insert({ tag: \"li\", html: e });\r\n                }\r\n            });\r\n        }\r\n        return Lists;\r\n    }\r\n\r\n    /**\r\n     * Create an svg element\r\n     * @param {svgElementDetails | Array.<svgElementDetails>} shape SVG Shape(s), can be object or array of object\r\n     * @param {SVGSVGElement} attr main SVG attributes if any\r\n     * @return\r\n     */\r\n    static createIcon(shape, attr = {}) {\r\n        /** @type {(opt: Object) => svgElemenOptions} */\r\n        const checkOpt = (opt) => {\r\n            /** @type {(size: String) => [string, string]} */\r\n            const deconstructSize = (size) => {\r\n                return size.split(\" \").length == 1 ? [size, size] : size.split(\" \");\r\n            };\r\n            let newOpt = {};\r\n            for (const key in opt) {\r\n                if (key !== \"size\") {\r\n                    newOpt[key] = opt[key];\r\n                } else {\r\n                    /** @type {[string, string]} */\r\n                    let [width, height] = deconstructSize(opt[key]);\r\n                    Object.assign(newOpt, { width, height });\r\n                }\r\n            }\r\n            return newOpt;\r\n        };\r\n\r\n        const namespace = \"http://www.w3.org/2000/svg\",\r\n            svgDOM = DOM.create(\"svg\", { namespace, ...checkOpt(attr) }),\r\n            shapes = Array.isArray(shape) ? shape : [shape];\r\n\r\n        shapes.forEach(({ type: tag, data }) => {\r\n            svgDOM.insert({ tag, namespace, ...checkOpt(data) });\r\n        });\r\n\r\n        return svgDOM;\r\n    }\r\n\r\n    /**\r\n     * Static method for creating new DOM instance with matched Element(s)\r\n     * @param {String | kindOfNode | NodeList | DOM} query\r\n     * @returns\r\n     */\r\n    static get(query) {\r\n        if (query instanceof DOM) return query;\r\n        return new DOM(query);\r\n    }\r\n\r\n    /**\r\n     * Static method for checking for existing Element\r\n     * @param {String | HTMLElement | kindOfNode} query target element\r\n     * @param {Number} timeout uint miliseconds\r\n     * @returns {Promise<HTMLElement | false>}\r\n     */\r\n    static async has(query, timeout = 10) {\r\n        return new Promise((done) => {\r\n            let loop = setInterval(() => {\r\n                let { first } = DOM.get(query);\r\n                if (first) {\r\n                    done(first);\r\n                    clearInterval(loop);\r\n                }\r\n                if ((timeout -= 1 == 0)) {\r\n                    done(false);\r\n                    clearInterval(loop);\r\n                }\r\n            }, 1e3);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Static method for creating and inserting new stylesheet into active page\r\n     * @param {String} css stylesheet\r\n     * @param {elemenOptions} props other html attributes\r\n     * @returns\r\n     */\r\n    static addStyle(css, props = {}) {\r\n        let opt = { tag: \"style\", html: css, append: \"head\" },\r\n            query = Object.assign({}, opt, props);\r\n\r\n        return DOM.create(query);\r\n    }\r\n\r\n    static utils = { toCamel, toKebab };\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Base","Array","isEmpty","this","length","nonEmptyValue","filter","val","first","undefined","at","last","changeIndex","oldIndex","newIndex","i","push","splice","countValue","count","forEach","e","isOnArray","item","some","elm","static","string","delimiter","arr","split","MyArray","arrayLike","from","rgx","snaKebab","camelCase","toCamel","test","toLowerCase","replace","m","toUpperCase","toKebab","toLocaleLowerCase","createElement","props","dom_","_dom","DOM","element","tag","namespace","document","createElementNS","unshift","setProperties","dom","node","name","setAttributeNS","innerHTML","cls","classList","add","className","remove","toggle","disabled","insertTo","insertBefore","insertAfter","value","dispatchEvent","evName","event","onEvent","readOnly","setAttribute","setProp","constructor","query","create","super","childNodes","parent","parentNode","nextSibling","append","isArray","opt","window","querySelectorAll","res","getElement","Document","Window","HTMLElement","isNode","NodeList","matches","elms","getParents","setParent","isPeek","elem","parents","set","isStyleKey","k","v","getOwnPropertyNames","style","styles","setStyle","zIndex","margin","padding","display","setStyles","getEle","removeChild","insert","fn","appendChild","target","prepend","replaceChild","type","listener","bubbles","addEventListener","assign","map","t","items","Lists","title","content","html","createList","shape","attr","checkOpt","newOpt","width","height","size","svgDOM","data","timeout","Promise","done","loop","setInterval","clearInterval","css"],"sourceRoot":""}