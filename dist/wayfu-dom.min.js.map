{"version":3,"file":"wayfu-dom.min.js","mappings":"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","sources":["webpack://DOM/webpack/universalModuleDefinition","webpack://DOM/webpack/bootstrap","webpack://DOM/webpack/runtime/define property getters","webpack://DOM/webpack/runtime/hasOwnProperty shorthand","webpack://DOM/./src/baseClass.js","webpack://DOM/./src/utils.js","webpack://DOM/./src/helpers.js","webpack://DOM/./index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DOM\"] = factory();\n\telse\n\t\troot[\"DOM\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * Extended Built-in Array\r\n * @class Base\r\n * @classdesc An custom array extends built in array\r\n * @augments {Array}\r\n */\r\nexport default class Base extends Array {\r\n    /**\r\n     * Get empty status current array\r\n     */\r\n    get isEmpty() {\r\n        return this.length <= 0;\r\n    }\r\n\r\n    /**\r\n     * Get all non epmty array items\r\n     */\r\n    get nonEmptyValue() {\r\n        return this.filter((val) => !!val);\r\n    }\r\n\r\n    /**\r\n     * Get first array item\r\n     */\r\n    get first() {\r\n        return !this.isEmpty ? this.at(0) : undefined;\r\n    }\r\n\r\n    /**\r\n     * Get last array item\r\n     */\r\n    get last() {\r\n        return !this.isEmpty ? this.at(this.length - 1) : undefined;\r\n    }\r\n\r\n    /**\r\n     * Change index order of an items, and return this array.\r\n     * `Carefull: This function will override old array.`\r\n     * @param {number} oldIndex\r\n     * @param {number} newIndex\r\n     * @returns\r\n     */\r\n    changeIndex(oldIndex, newIndex) {\r\n        if (newIndex >= this.length) {\r\n            let i = newIndex - this.length + 1;\r\n            while (i--) {\r\n                this.push(undefined);\r\n            }\r\n        }\r\n        this.splice(newIndex, 0, this.splice(oldIndex, 1)[0]);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Count number of a value in current array;\r\n     * @param {any} val\r\n     * @returns {number}\r\n     */\r\n    countValue(val) {\r\n        let count = 0;\r\n        this.forEach((e) => {\r\n            count += e === val ? 1 : 0;\r\n        });\r\n        return count;\r\n    }\r\n\r\n    /**\r\n     * Check given value is on this array or not\r\n     * @param {any} item\r\n     * @returns {boolean}\r\n     */\r\n    isOnArray(item) {\r\n        return this.some((elm) => item === elm);\r\n    }\r\n\r\n    /**\r\n     * Create an array by spliting a string with a delimiter\r\n     * @param {String} string\r\n     * @param {String} delimiter\r\n     * @returns {MyArray}\r\n     */\r\n    static split(string, delimiter) {\r\n        let arr = string.split(delimiter);\r\n        return new MyArray(...arr);\r\n    }\r\n}\r\n","/**\r\n * @typedef {import(\"../types\").kindOfNode} kindOfNode\r\n */\r\n\r\nconst rgx = {\r\n    snaKebab: /([-_][a-z])/g,\r\n    camelCase: /[A-Z]/g,\r\n};\r\n\r\n/**\r\n * Convert `snake_case` or `kebab-case` to `camelCase` string\r\n * @param {String} string\r\n * @returns\r\n */\r\nfunction toCamel(string) {\r\n    let { snaKebab } = rgx;\r\n    if (!snaKebab.test(string)) return string;\r\n\r\n    string = string.toLowerCase();\r\n    return string.replace(snaKebab, (m) => {\r\n        return m.toUpperCase().replace(\"-\", \"\").replace(\"_\", \"\");\r\n    });\r\n}\r\n\r\n/**\r\n * Convert `camelCase` to `kebab-case` string\r\n * @param {String} string\r\n * @returns\r\n */\r\nfunction toKebab(string) {\r\n    let { camelCase } = rgx;\r\n    if (!camelCase.test(string)) return string;\r\n\r\n    return string.replace(camelCase, (m) => {\r\n        return `-${m.toLocaleLowerCase()}`;\r\n    });\r\n}\r\n\r\n/**\r\n * Check the given query is belongs to Node type or not\r\n * @param {kindOfNode | Object} query\r\n * @returns\r\n */\r\nfunction isNode(query) {\r\n    return (\r\n        query instanceof Document ||\r\n        query instanceof Window ||\r\n        query instanceof HTMLElement\r\n    );\r\n}\r\n\r\nexport { toCamel, toKebab, isNode };\r\n","import DOM from \"../index.js\";\r\nimport { toKebab } from \"./utils.js\";\r\n\r\n/**\r\n * @typedef {import(\"../types.js\").elemenOptions} elemenOptions\r\n * @typedef {import(\"../types.js\").kindOfNode} kindOfNode\r\n * @typedef {import(\"../types.js\").listElementOptions} listElementOptions\r\n * @typedef {import(\"../types.js\").svgElemenOptions} svgElemenOptions\r\n */\r\n\r\n/**\r\n * Actual method for creating Element(s)\r\n * and Collect it into DOM Object\r\n * @param {elemenOptions | svgElemenOptions} props\r\n * @param {DOM?} dom_\r\n * @returns\r\n */\r\nfunction createElement(props, dom_) {\r\n    let _dom = dom_ ? dom_ : new DOM();\r\n\r\n    const element = (({ tag, namespace }) => {\r\n        if (namespace) return document.createElementNS(namespace, tag);\r\n        return document.createElement(tag);\r\n    })(props);\r\n\r\n    delete props.tag;\r\n\r\n    _dom.unshift(element);\r\n\r\n    return setProperties(props, _dom);\r\n    // return _dom.setProperties(props);\r\n}\r\n\r\n/**\r\n * Method for geting Element(s)\r\n * and Collect it into DOM Object\r\n * @param {String} query\r\n * @param {DOM} dom_\r\n * @returns\r\n */\r\nfunction getElement(query, dom_) {\r\n    let _dom = dom_ ? dom_ : new DOM();\r\n\r\n    if (!_dom.first) {\r\n        if (/^(?:document|window)$/g.test(query)) {\r\n            return _dom.get(/^document$/g.test(query) ? document : window);\r\n        }\r\n    }\r\n\r\n    if (_dom.first) return DOM.get(_dom.first.querySelectorAll(query));\r\n\r\n    let res = document.querySelectorAll(query);\r\n    if (!res.length) return _dom;\r\n\r\n    res.forEach((node) => _dom.push(node));\r\n    return _dom;\r\n}\r\n\r\n/**\r\n * Set properties for current HTML Element\r\n * @param {elemenOptions} props\r\n * @param {DOM} dom\r\n * @returns\r\n */\r\nfunction setProperties(props, dom) {\r\n    let { namespace } = props;\r\n\r\n    delete props.namespace;\r\n    /** @type {(node: HTMLElement) => void} */\r\n    const setProp = (node) => {\r\n        for (const name in props) {\r\n            if (props.hasOwnProperty(name)) {\r\n                if (!namespace) {\r\n                    switch (name) {\r\n                        case \"text\":\r\n                            let text =\r\n                                \"innerText\" in document ? \"innerText\" : \"textContent\";\r\n                            node[text] = props[name];\r\n                            break;\r\n                        case \"html\":\r\n                            node.innerHTML = props[name];\r\n                            break;\r\n                        case \"class\":\r\n                        case \"classid\":\r\n                            if (typeof props[name] === \"array\") {\r\n                                for (let cls of props[name]) {\r\n                                    node.classList.add(cls);\r\n                                }\r\n                            } else if (typeof props[name] === \"string\") {\r\n                                node.className = props[name];\r\n                            }\r\n                            break;\r\n                        case \"addClass\":\r\n                            node.classList.add(props[name]);\r\n                            break;\r\n                        case \"removeClass\":\r\n                            node.classList.remove(props[name]);\r\n                            break;\r\n                        case \"toggleClass\":\r\n                            node.classList.toggle(props[name]);\r\n                            break;\r\n                        case \"disabled\":\r\n                            node.disabled = props[name];\r\n                            break;\r\n                        case \"append\":\r\n                            DOM.get(node).insertTo(props[name]);\r\n                            break;\r\n                        case \"prepend\":\r\n                            DOM.get(node).insertBefore(props[name], true);\r\n                            break;\r\n                        case \"before\":\r\n                            DOM.get(node).insertBefore(props[name]);\r\n                            break;\r\n                        case \"after\":\r\n                            DOM.get(node).insertAfter(props[name]);\r\n                            break;\r\n                        case \"value\":\r\n                            node.value = props[name];\r\n                            break;\r\n                        case \"dispatch\":\r\n                            node.dispatchEvent(props[name]);\r\n                            break;\r\n                        case \"replace\":\r\n                            DOM.get(node).replace(props[name]);\r\n                            break;\r\n                        case \"event\":\r\n                            for (const evName in props.event) {\r\n                                if (props.event.hasOwnProperty(evName)) {\r\n                                    DOM.get(node).onEvent(evName, props.event[evName]);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case \"callback\":\r\n                            props[name](node);\r\n                            break;\r\n                        case \"readonly\":\r\n                        case \"readOnly\":\r\n                            node.readOnly = props[name];\r\n                            break;\r\n                        default:\r\n                            node.setAttribute(name, props[name]);\r\n                    }\r\n                } else {\r\n                    node.setAttributeNS(null, toKebab(name), props[name]);\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    if (dom.isEmpty) return dom;\r\n\r\n    dom.forEach((e) => setProp(e));\r\n\r\n    return dom;\r\n}\r\n\r\n/**\r\n * Set Element(s) styles. Can process multiple element\r\n * @param {elementStyles} styles\r\n * @param {DOM} dom\r\n * @returns\r\n */\r\nfunction setStyles(styles, dom) {\r\n    /** @type {(node: HTMLElement | undefined, props: CSSStyleDeclaration) => void} */\r\n    const setStyle = (node, props) => {\r\n        if (!node) return dom;\r\n        for (const key in props) {\r\n            if (props.hasOwnProperty(key)) {\r\n                switch (key) {\r\n                    case \"zIndex\":\r\n                        node.style.zIndex = props[key];\r\n                        break;\r\n                    case \"margin\":\r\n                        node.style.margin = props[key];\r\n                        break;\r\n                    case \"padding\":\r\n                        node.style.padding = props[key];\r\n                        break;\r\n                    case \"display\":\r\n                        node.style.display = props[key];\r\n                        break;\r\n                    default:\r\n                        node.style[key] = props[key];\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /** @type {(query: String | kindOfNode) => HTMLElement | undefined} */\r\n    const getEle = (query) => DOM.get(query).first;\r\n\r\n    if (Array.isArray(styles)) {\r\n        styles.forEach(({ elm, props }) => {\r\n            setStyle(getEle(elm), props);\r\n        });\r\n\r\n        return dom;\r\n    }\r\n\r\n    if (dom.isEmpty) return dom;\r\n\r\n    dom.forEach((e) => setStyle(e, styles));\r\n\r\n    return dom;\r\n}\r\n\r\nexport { createElement, getElement, setProperties, setStyles };\r\n","import Base from \"./src/baseClass.js\";\r\nimport { toCamel, isNode } from \"./src/utils.js\";\r\nimport { createElement, getElement, setProperties, setStyles } from \"./src/helpers.js\";\r\n\r\n/**\r\n * @typedef {import(\"./types.js\").elemenOptions} elemenOptions\r\n * @typedef {import(\"./types.js\").kindOfNode} kindOfNode\r\n * @typedef {import(\"./types.js\").listElementOptions} listElementOptions\r\n * @typedef {import(\"./types.js\").svgElementDetails} svgElementDetails\r\n * @typedef {import(\"./types.js\").svgElemenOptions} svgElemenOptions\r\n */\r\n/**\r\n * Just a DOM Class using extended custom Array\r\n * @extends {Base<HTMLElement>}\r\n */\r\nexport default class DOM extends Base {\r\n    /**\r\n     * Create new Empty DOM Object\r\n     * @overload\r\n     * @type {() => DOM}\r\n     */ /**\r\n     * Create new DOM with matched Element(s) from query\r\n     * @overload\r\n     * @param {String | kindOfNode | NodeList} query\r\n     */ /**\r\n     * Return the current DOM\r\n     * @overload\r\n     * @param {DOM} query\r\n     */ /**\r\n     * Create new DOM with created Element(s) from given properties\r\n     * @overload\r\n     * @param {(elemenOptions | elemenOptions[])} query\r\n     * @param {true} create\r\n     */\r\n    constructor(query, create) {\r\n        super();\r\n        return create ? this.create(query) : this.get(query);\r\n    }\r\n\r\n    /** Get current element childNodes */\r\n    get childNodes() {\r\n        return !this.isEmpty ? this.first.childNodes : undefined;\r\n    }\r\n\r\n    /** Get current element parent */\r\n    get parent() {\r\n        return !this.isEmpty ? this.first.parentNode : undefined;\r\n    }\r\n\r\n    /** Get current next sibling element */\r\n    get nextSibling() {\r\n        return !this.isEmpty ? this.first.nextSibling : undefined;\r\n    }\r\n\r\n    /** Get current element classList*/\r\n    get classList() {\r\n        return !this.isEmpty ? this.first.classList : undefined;\r\n    }\r\n\r\n    /**\r\n     * Create new HTMLElement(s) and\r\n     * Collect it into DOM Object\r\n     * @param {elemenOptions | elemenOptions[] | null} props\r\n     * @returns\r\n     */\r\n    create(props) {\r\n        if (!props) return this;\r\n\r\n        if (this.first) return DOM.create(props, { append: this.first });\r\n\r\n        if (Array.isArray(props)) {\r\n            for (let opt of props) {\r\n                if (typeof opt !== \"object\" && !opt.tag) continue;\r\n\r\n                createElement(props, this);\r\n            }\r\n\r\n            return this;\r\n        }\r\n\r\n        return createElement(props, this);\r\n    }\r\n\r\n    /**\r\n     * Get some HTMLElement(s) and\r\n     * Collect it into DOM Object\r\n     * @param {String | kindOfNode | NodeList | DOM | null} query\r\n     * @returns\r\n     */\r\n    get(query) {\r\n        if (!query) return this;\r\n        if (typeof query === \"string\") return getElement(query, this);\r\n        if (query instanceof DOM) return query;\r\n\r\n        if (isNode(query)) {\r\n            this.push(query);\r\n        } else if (query instanceof NodeList) {\r\n            if (query.length === 0) return this;\r\n            query.forEach((node) => this.push(node));\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Is current element matches with given query?\r\n     * @param {String | kindOfNode | NodeList | DOM} query\r\n     * @returns\r\n     */\r\n    matches(query) {\r\n        let elms = DOM.get(query),\r\n            { length: i } = elms;\r\n\r\n        if (elms.isEmpty) return false;\r\n        while (--i >= 0 && elms.at(i) !== this.first) {}\r\n        return i > -1;\r\n    }\r\n\r\n    /**\r\n     * Get some HTMLElement(s) that are parent for current element\r\n     * and Collect it into DOM Object\r\n     * @param {String | kindOfNode | NodeList | DOM | null} query\r\n     * @returns\r\n     */\r\n    getParents(query) {\r\n        /** @type {(elm: DOM) => DOM} */\r\n        const setParent = (elm) => DOM.get(elm.parent);\r\n        /** @type {(elm: DOM) => boolean} */\r\n        const isPeek = (elm) => {\r\n            let { isEmpty, first } = elm;\r\n            return !isEmpty && first !== document;\r\n        };\r\n\r\n        let elem = this,\r\n            parents = setParent(elem);\r\n\r\n        for (; isPeek(elem); elem = setParent(elem)) {\r\n            if (query) {\r\n                if (elem.matches(query)) parents = elem;\r\n                continue;\r\n            }\r\n            parents.unshift(elem.first);\r\n        }\r\n        return parents;\r\n    }\r\n\r\n    /**\r\n     * Set single properties. Can be attributes or stylesheet\r\n     * @param {String | {[k: String]: String | Number | Boolean}} key\r\n     * @param {String | Number | Boolean | null} value\r\n     * @returns\r\n     */\r\n    set(key, value) {\r\n        if (typeof key === \"object\") {\r\n            for (let name in key) {\r\n                this.set(name, key[name]);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        if (this.isEmpty) return this;\r\n\r\n        const [isStyleKey, props] = ((k, v) => {\r\n            let keys = Object.getOwnPropertyNames(this.first.style);\r\n            return [keys.some((e) => e === k), { [k]: v }];\r\n        })(toCamel(key), value);\r\n\r\n        return isStyleKey ? setStyles(props, this) : setProperties(props, this);\r\n    }\r\n\r\n    /**\r\n     * Remove current element or an element from current element\r\n     * @param {String | kindOfNode | DOM | null} query\r\n     * @returns\r\n     */\r\n    remove(query) {\r\n        const getEle = (query) => DOM.get(query).first;\r\n\r\n        if (query) {\r\n            this.first.removeChild(getEle(query));\r\n        } else {\r\n            getEle(\"body\").removeChild(this.first);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert an element into current element\r\n     * if it's non exist element, then create one\r\n     * @param {String | kindOfNode | DOM | elemenOptions} element\r\n     * @returns\r\n     */\r\n    insert(element) {\r\n        const { first: elm } = ((e, fn) => {\r\n            if (e instanceof DOM) return e;\r\n            if (typeof e === \"object\") return fn.create(e);\r\n            return fn.get(e).isEmpty ? fn.create(e) : fn.get(e);\r\n        })(element, DOM);\r\n\r\n        this.first.appendChild(elm);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert current element into target element\r\n     * @param {String | kindOfNode | DOM} target\r\n     * @returns\r\n     */\r\n    insertTo(target) {\r\n        const getEle = (query) => DOM.get(query).first;\r\n        getEle(target).appendChild(this.first);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert current element into first child of target element\r\n     * @param {String | kindOfNode | DOM} target\r\n     * @param {Boolean?} prepend\r\n     * @returns\r\n     */\r\n    insertBefore(target, prepend = false) {\r\n        const { first, parent, childNodes } = DOM.get(target);\r\n\r\n        if (!prepend) {\r\n            parent.insertBefore(this.first, first);\r\n        } else {\r\n            if (childNodes.length) {\r\n                first.insertBefore(this.first, childNodes[0]);\r\n            } else {\r\n                this.insertTo(target);\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Insert current element after target element\r\n     * @param {String | kindOfNode | DOM} target\r\n     * @returns\r\n     */\r\n    insertAfter(target) {\r\n        const { parent, nextSibling } = DOM.get(target);\r\n        parent.insertBefore(this.first, nextSibling);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Replace target element with current element\r\n     * @param {String | kindOfNode | DOM} target\r\n     * @returns\r\n     */\r\n    replace(target) {\r\n        const { parent, first } = DOM.get(target);\r\n        parent.replaceChild(this.first, first);\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add event listener to an element\r\n     * @param {string} type type of event\r\n     * @param {EventListener} listener event listener\r\n     * @param {boolean} bubbles bubbling\r\n     * @returns\r\n     */\r\n    onEvent(type, listener, bubbles = false) {\r\n        if (window.addEventListener) {\r\n            (this.first || window).addEventListener(type, listener, bubbles);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Static method for creating new DOM instance with new Element(s)\r\n     * @param {String | DOM | elemenOptions | elemenOptions[]} tag\r\n     * @param {elemenOptions} opt\r\n     * @returns\r\n     */\r\n    static create(tag, opt = {}) {\r\n        if (tag instanceof DOM) return tag;\r\n\r\n        /** @type {(tag: String | elemenOptions, opt: elemenOptions) => elemenOptions} */\r\n        const props = (tag, opt) => {\r\n            return Object.assign(typeof tag == \"string\" ? { tag } : tag, opt);\r\n        };\r\n\r\n        if (Array.isArray(tag)) {\r\n            tag.map((e) => {\r\n                let { tag: t, ...prop } = e;\r\n                return !!prop ? props(t, props(prop, opt)) : props(e, opt);\r\n            });\r\n            return new DOM(tag, true);\r\n        }\r\n\r\n        return new DOM(props(tag, opt), true);\r\n    }\r\n\r\n    /**\r\n     * Static method for creating new DOM instance with new Element(s)\r\n     * @param {Array<listElementOptions|String>} items\r\n     * @param {\"ol\"|\"ul\"} type list type\r\n     * @param {elemenOptions} opt\r\n     * @returns\r\n     */\r\n    static createList(items, type = \"ol\", opt = {}) {\r\n        let Lists = DOM.create(type, opt);\r\n        if (Array.isArray(items)) {\r\n            items.forEach((e) => {\r\n                if (typeof e === \"object\") {\r\n                    let { title, type, content } = e,\r\n                        item = DOM.create(\"li\", { html: title });\r\n\r\n                    if (Array.isArray(content)) {\r\n                        DOM.createList(content, type || \"ol\").insertTo(item);\r\n                    }\r\n                    Lists.insert(item);\r\n                } else if (typeof e === \"string\") {\r\n                    Lists.insert({ tag: \"li\", html: e });\r\n                }\r\n            });\r\n        }\r\n        return Lists;\r\n    }\r\n\r\n    /**\r\n     * Create an svg element\r\n     * @param {svgElementDetails | Array.<svgElementDetails>} shape SVG Shape(s), can be object or array of object\r\n     * @param {SVGSVGElement} attr main SVG attributes if any\r\n     * @return\r\n     */\r\n    static createIcon(shape, attr = {}) {\r\n        /** @type {(opt: Object) => svgElemenOptions} */\r\n        const checkOpt = (opt) => {\r\n            /** @type {(size: String) => [string, string]} */\r\n            const deconstructSize = (size) => {\r\n                return size.split(\" \").length == 1 ? [size, size] : size.split(\" \");\r\n            };\r\n            let newOpt = {};\r\n            for (const key in opt) {\r\n                if (key !== \"size\") {\r\n                    newOpt[key] = opt[key];\r\n                } else {\r\n                    /** @type {[string, string]} */\r\n                    let [width, height] = deconstructSize(opt[key]);\r\n                    Object.assign(newOpt, { width, height });\r\n                }\r\n            }\r\n            return newOpt;\r\n        };\r\n\r\n        const namespace = \"http://www.w3.org/2000/svg\",\r\n            svgDOM = DOM.create(\"svg\", { namespace, ...checkOpt(attr) }),\r\n            shapes = Array.isArray(shape) ? shape : [shape];\r\n\r\n        shapes.forEach(({ type: tag, data }) => {\r\n            svgDOM.insert({ tag, namespace, ...checkOpt(data) });\r\n        });\r\n\r\n        return svgDOM;\r\n    }\r\n\r\n    /**\r\n     * Static method for creating new DOM instance with matched Element(s)\r\n     * @param {String | kindOfNode | NodeList | DOM} query\r\n     * @returns\r\n     */\r\n    static get(query) {\r\n        if (query instanceof DOM) return query;\r\n        return new DOM(query);\r\n    }\r\n\r\n    /**\r\n     * Static method for checking for existing Element\r\n     * @param {String | HTMLElement | kindOfNode} query target element\r\n     * @param {Number} timeout uint miliseconds\r\n     * @returns {Promise<HTMLElement | false>}\r\n     */\r\n    static async has(query, timeout = 10) {\r\n        return new Promise((done) => {\r\n            let loop = setInterval(() => {\r\n                let { first } = DOM.get(query);\r\n                if (first) {\r\n                    done(first);\r\n                    clearInterval(loop);\r\n                }\r\n                if ((timeout -= 1 == 0)) {\r\n                    done(false);\r\n                    clearInterval(loop);\r\n                }\r\n            }, 1e3);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Static method for creating and inserting new stylesheet into active page\r\n     * @param {String} css stylesheet\r\n     * @param {elemenOptions} props other html attributes\r\n     * @returns\r\n     */\r\n    static addStyle(css, props = {}) {\r\n        let opt = { tag: \"style\", html: css, append: \"head\" },\r\n            query = Object.assign({}, opt, props);\r\n\r\n        return DOM.create(query);\r\n    }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Base","Array","isEmpty","this","length","nonEmptyValue","filter","val","first","undefined","at","last","changeIndex","oldIndex","newIndex","i","push","splice","countValue","count","forEach","e","isOnArray","item","some","elm","static","string","delimiter","arr","split","MyArray","rgx","snaKebab","camelCase","toKebab","test","replace","m","toLocaleLowerCase","createElement","props","dom_","_dom","DOM","element","tag","namespace","document","createElementNS","unshift","setProperties","dom","node","name","setAttributeNS","innerHTML","cls","classList","add","className","remove","toggle","disabled","insertTo","insertBefore","insertAfter","value","dispatchEvent","evName","event","onEvent","readOnly","setAttribute","setProp","setStyles","styles","setStyle","style","zIndex","margin","padding","display","isArray","query","constructor","create","super","childNodes","parent","parentNode","nextSibling","append","opt","window","querySelectorAll","res","getElement","Document","Window","HTMLElement","isNode","NodeList","matches","elms","getParents","setParent","isPeek","elem","parents","set","isStyleKey","k","v","getOwnPropertyNames","toLowerCase","toUpperCase","toCamel","getEle","removeChild","insert","fn","appendChild","target","prepend","replaceChild","type","listener","bubbles","addEventListener","assign","map","t","items","Lists","title","content","html","createList","shape","attr","checkOpt","newOpt","width","height","size","svgDOM","data","timeout","Promise","done","loop","setInterval","clearInterval","css"],"sourceRoot":""}